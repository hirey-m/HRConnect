/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import employeeModel.Employee;
import employeeModel.EmployeeDirectory;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author manavhirey
 */
public class SearchPane extends javax.swing.JPanel {

    /**
     * Creates new form SearchPane
     */
    EmployeeDirectory directory;
    
    public SearchPane(EmployeeDirectory directory) {
        initComponents();
        
        this.directory = directory;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comboSearchBy = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        searchSelectBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();

        titleLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Search Employees");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel1.setText("Keyword:");

        comboSearchBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "employeeId", "name", "age" }));
        comboSearchBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSearchByActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setText("Search by:");

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "EmpID", "Photo", "Name", "Gender", "Position", "Level", "Team", "Start Date", "Phone", "Email", "Age"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(resultTable);

        searchSelectBtn.setText("Select");
        searchSelectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSelectBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(searchSelectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSearchBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchSelectBtn)
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSearchByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSearchByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSearchByActionPerformed

    private void searchSelectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSelectBtnActionPerformed
        // TODO add your handling code here:
    
  
    }//GEN-LAST:event_searchSelectBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String filter = comboSearchBy.getSelectedItem().toString();
        String search = searchField.getText();
        
        if(filter.compareToIgnoreCase("employeeId") == 0){
            populateByEmployeeId(search);
        }
        if(filter.compareToIgnoreCase("name") == 0){
            populateByName(search);
        }
        if(filter.compareToIgnoreCase("age") == 0){
            
            populateByAge(Integer.parseInt(search));
        }
       
        
    }//GEN-LAST:event_searchBtnActionPerformed

    private void populateByEmployeeId(String empId){
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        model.setRowCount(0);
        
        for(Employee ne: directory.getDirectory()){
            if(empId.compareTo(ne.getEmployeeId()) == 0){
                Object[] row = new Object[11];
                row[0] = ne;
                //row[0] = ne.getEmployeeId();
                row[1] = ne.getImage();
                row[2] = ne.getName();
                row[3] = ne.getGender();
                row[4] = ne.getPosition();
                row[5] = ne.getLevel();
                row[6] = ne.getTeamInfo();
                row[7] = ne.getCellNo();
                row[8] = ne.getEmail();
                row[9] = ne.getStartDate();
                row[10] = ne.getAge();


                model.addRow(row);
            }
            
        }
    }
    
    private void populateByName(String name){
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        model.setRowCount(0);
        for(Employee ne: directory.getDirectory()){
            if(name.compareTo(ne.getName()) == 0){
                Object[] row = new Object[11];
                row[0] = ne;
                //row[0] = ne.getEmployeeId();
                row[1] = ne.getImage();
                row[2] = ne.getName();
                row[3] = ne.getGender();
                row[4] = ne.getPosition();
                row[5] = ne.getLevel();
                row[6] = ne.getTeamInfo();
                row[7] = ne.getCellNo();
                row[8] = ne.getEmail();
                row[9] = ne.getStartDate();
                row[10] = ne.getAge();


                model.addRow(row);
            }
        }
    }
    
    private void populateByAge(int age){
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        model.setRowCount(0);
        for(Employee ne: directory.getDirectory()){
            if(age == ne.getAge()){
                Object[] row = new Object[11];
                row[0] = ne;
                //row[0] = ne.getEmployeeId();
                row[1] = ne.getImage();
                row[2] = ne.getName();
                row[3] = ne.getGender();
                row[4] = ne.getPosition();
                row[5] = ne.getLevel();
                row[6] = ne.getTeamInfo();
                row[7] = ne.getCellNo();
                row[8] = ne.getEmail();
                row[9] = ne.getStartDate();
                row[10] = ne.getAge();


                model.addRow(row);
            }
        }
    }
    
    
    private void populateTable(){
        
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        model.setRowCount(0);
        
        for(Employee ne: directory.getDirectory()){
            
            Object[] row = new Object[11];
            row[0] = ne;
            //row[0] = ne.getEmployeeId();
            row[1] = ne.getImage();
            row[2] = ne.getName();
            row[3] = ne.getGender();
            row[4] = ne.getPosition();
            row[5] = ne.getLevel();
            row[6] = ne.getTeamInfo();
            row[7] = ne.getCellNo();
            row[8] = ne.getEmail();
            row[9] = ne.getStartDate();
            row[10] = ne.getAge();
           
            
            model.addRow(row);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboSearchBy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton searchSelectBtn;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private void searchFetch(String search) {
       DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
       TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel> (model);
       resultTable.setRowSorter(trs);
       
       trs.setRowFilter(RowFilter.regexFilter(search));
    }
}
